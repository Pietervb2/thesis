import numpy as np
import matplotlib.pyplot as plt
from pipe import Pipe

class Node:

    def __init__(self, x, y, z):

        self.pipes_in = {}
        self.pipes_out = {}
        self.T = 0 # [K] temperature of the node
        
        self.x = x
        self.y = y
        self.z = z  

        """
        TODO: Working with T and flow requires using a timestep. This can be later implemented when implementing the for loop simulation. 
        """
        

    def initialize_node(self, num_steps, T_init) -> None:
        """
        Initialize the temperature in the node

        Args:
        num_steps: number of steps the simulation takes
        T_init: initial temperature [K]
        """

        self.T = np.zeros(num_steps)
        self.T[0] = T_init


    def add_pipe(self, pipe_id, pipe, direction):
        """
        Function that adds an pipe to the node.

        Args:
            pipe_id : id of the pipe
            pipe (Pipe): the pipe to be added to the node.
            direction (str): the direction of the pipe, either 'in' or 'out'.
        """

        if direction == 'incoming':
            self.pipes_in[pipe_id] = pipe
        elif direction == 'outgoing':
            self.pipes_out[pipe_id] = pipe
        else:
            raise ValueError(f"Invalid direction: {direction}")
        
    def set_flow(self, N):
        """
        Function that calculates the flow of each in- and output pipe of the node.

        For now divide the mass flow based on the diameter of the pipes. 

        # TODO: maybe it need to put in the new flow at N + 1
        """         

        # total mass in flow
        total_m_inflow = sum(pipe['pipe'].get_m_flow(N) for pipe in self.pipes_in)

        try:
            # assume complete filling of pipe and simply divide total mass flow NOTE: check this assumption
            m_outflow = total_m_inflow / len(self.pipes_in)

            for pipe in self.pipes_out:
                pipe['pipe'].set_m_flow(m_outflow, N)     
        except(ZeroDivisionError):
            print("No ingoing mass flow")

        # TODO: workout the pressure calculation to further give this meaning. 

    def set_T(self, N):
        """
        Function that calculates the temperature at the node

        TODO: for now it just uses the weighted average based on the in- and outflow. 
        """
        
        sum_T_flow = 0
        sum_m_flow = 0
        for pipe_id in self.pipes_in.keys():
            
            m_flow = pipe_instance.get_m_flow(N)
            pipe_instance = self.pipes_in[pipe_id]
            sum_T_flow += pipe_instance.T[N] * m_flow
            sum_m_flow += m_flow
        
        try:    
            self.T[N] = sum_T_flow / sum_m_flow
        except(ZeroDivisionError):
            print("No ingoing mass flow")

    def get_T(self):
        return self.T

    def get_number_pipes_in(self):
        return len(self.pipes_in)

    def get_number_pipes_out(self):
        return len(self.pipes_out)


# NOTE: Generated by Github Copilot, not sure yet how to use it. 
    # def remove_pipe(self,pipe):
    #     """
    #     Function that removes an pipe from the node.

    #     Args:
    #         pipe (Pipe): the pipe to be removed from the node.
    #     """

    #     if pipe in self.pipes_in:
    #         self.pipes_in.remove(pipe)
    #     elif pipe in self.pipes_out:
    #         self.pipes_out.remove(pipe)
    #     else:
    #         raise ValueError(f"Pipe {pipe} not found in node")



if __name__ == "__main__":

    node1 = Node(1,1,1)
    pipe1 = Pipe(10, 0.1, 0.08, 100)
    node1.add_pipe('pipe1', pipe1, 'outgoing')
    
    node1.set_flow()
    node1.set_T()

    print(node1.get_number_pipes_out())